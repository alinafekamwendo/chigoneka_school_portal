async function calculateAnnualGrades(academicYearId) {
  const terms = await Term.findAll({ 
    where: { academicYearId },
    order: [['startDate', 'ASC']] 
  });

  const students = await Student.findAll();
  
  for (const student of students) {
    const annualGrades = [];
    
    for (const subject of student.Class.Subjects) {
      const termGrades = await Grade.findAll({
        where: {
          studentId: student.userId,
          subjectId: subject.id,
          termId: terms.map(t => t.id)
        },
        order: [['termId', 'ASC']]
      });
      
      // Calculate weighted average (example: 30% Term 1, 30% Term 2, 40% Term 3)
      const annualScore = calculateWeightedAverage(termGrades);
      
      annualGrades.push({
        studentId: student.userId,
        subjectId: subject.id,
        academicYearId,
        score: annualScore,
        isAnnual: true
      });
    }
    
    await Grade.bulkCreate(annualGrades);
  }
}

// controllers/termController.js
const completeTerm = async (req, res) => {
  try {
    const term = await Term.findByPk(req.params.id);
    
    if (!term.isFinalTerm) {
      return res.status(400).json({ error: 'Only final terms can be completed' });
    }

    // 1. Calculate final grades for all students
    await calculateAnnualGrades(term.academicYearId);
    
    // 2. Promote students to next class (if applicable)
    await promoteStudents(term.academicYearId);
    
    // 3. Archive current academic year
    await AcademicYear.update(
      { isCompleted: true, isCurrent: false },
      { where: { id: term.academicYearId } }
    );
    
    // 4. Create new academic year if needed
    await createNewAcademicYear();
    
    res.json({ message: 'Term completed successfully' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

async function promoteStudents(academicYearId) {
  // Get all classes and their progression rules
  const classes = await Class.findAll();
  const classProgression = {}; // Should be configured in admin
  
  for (const classObj of classes) {
    classProgression[classObj.id] = classObj.nextClassId;
  }

  // Process each student
  const students = await Student.findAll({
    include: [Class, Grade]
  });

  for (const student of students) {
    // Check promotion requirements (example: pass core subjects)
    const passed = checkPromotionCriteria(student);
    
    if (passed && classProgression[student.classId]) {
      await student.update({
        classId: classProgression[student.classId]
      });
      
      // Generate new admission number if needed
      if (student.Class.level !== student.previousClass.level) {
        await student.update({
          admissionNumber: generateNewAdmissionNumber(student)
        });
      }
    } else if (!passed) {
      // Handle retention or special cases
      await handleRetention(student);
    }
  }
}

async function createNewAcademicYear() {
  const currentYear = new Date().getFullYear();
  const newYear = await AcademicYear.create({
    name: `${currentYear}-${currentYear+1}`,
    startDate: new Date(currentYear, 8, 1), // September 1st
    endDate: new Date(currentYear+1, 7, 31), // August 31st next year
    isCurrent: true
  });

  // Create terms for new year
  await Term.bulkCreate([
    {
      name: 'Term 1',
      startDate: new Date(currentYear, 8, 1),
      endDate: new Date(currentYear, 11, 15),
      academicYearId: newYear.id,
      isCurrent: true
    },
    {
      name: 'Term 2',
      startDate: new Date(currentYear+1, 0, 7),
      endDate: new Date(currentYear+1, 3, 1),
      academicYearId: newYear.id
    },
    {
      name: 'Term 3',
      startDate: new Date(currentYear+1, 3, 15),
      endDate: new Date(currentYear+1, 7, 31),
      academicYearId: newYear.id,
      isFinalTerm: true
    }
  ]);
}

// controllers/termController.js
const completeTerm = async (req, res) => {
  try {
    const term = await Term.findByPk(req.params.id);
    
    if (!term.isFinalTerm) {
      return res.status(400).json({ error: 'Only final terms can be completed' });
    }

    // 1. Calculate final grades for all students
    await calculateAnnualGrades(term.academicYearId);
    
    // 2. Promote students to next class (if applicable)
    await promoteStudents(term.academicYearId);
    
    // 3. Archive current academic year
    await AcademicYear.update(
      { isCompleted: true, isCurrent: false },
      { where: { id: term.academicYearId } }
    );
    
    // 4. Create new academic year if needed
    await createNewAcademicYear();
    
    res.json({ message: 'Term completed successfully' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};


request bodies:
request bodies:
Admin
create
{
  "firstName": "John",
  "lastName": "Doe",
  "username": "johndoe_admin",
  "role": "admin",
  "password": "securePassword123",
  "address": "123 Admin Street",
  "email": "john.doe@school.edu",
  "phone": "+1234567890",
  "sex": "MALE",
  "level": "super" // or "regular"
}

update admin:
{
  "firstName": "John",
  "lastName": "Doe Updated",
  "email": "john.updated@school.edu",
  "level": "super" // Updating admin level
}

teacher
create:{
  "firstName": "Jane",
  "lastName": "Smith",
  "username": "janesmith_teacher",
  "role": "teacher",
  "password": "teacherPass123",
  "address": "456 Educator Lane",
  "email": "jane.smith@school.edu",
  "phone": "+1987654321",
  "sex": "FEMALE",
  "qualifications": ["PhD in Mathematics", "MEd"],
  "subjects": ["Math", "Calculus"]
}
update:{
  "firstName": "Jane",
  "lastName": "Smith-Anderson",
  "email": "jane.anderson@school.edu",
  "subjects": ["Math", "Calculus", "Statistics"] // Adding a new subject
}

parent:{
  "firstName": "Robert",
  "lastName": "Johnson",
  "username": "robertj_parent",
  "role": "parent",
  "password": "parentPass123",
  "address": "789 Family Road",
  "email": "robert.johnson@example.com",
  "phone": "+1122334455",
  "sex": "MALE"
}

update:{
  "phone": "+1122334499", // Updating phone number
  "address": "789 Family Road, Apt 2B"
}

student:create:{
  "firstName": "Emily",
  "lastName": "Johnson",
  "username": "emilyj_student",
  "role": "student",
  "password": "studentPass123",
  "address": "789 Family Road",
  "email": "emily.johnson@school.edu",
  "phone": "+1555666777",
  "sex": "FEMALE",
  "parentId": "a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8", // UUID of parent
  "alte_guardian_Id": "b2c3d4e5-f6g7-8901-h2i3-j4k5l6m7n8o9" // Optional
}

upadte:{
  "email": "emily.j.updated@school.edu",
  "parentId": "x1y2z3w4-v5u6-7890-t1s2-r3q4p5o6n7m8" // Changing parent
}